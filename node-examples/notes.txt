JavaScript originally was never designed with any common libraries.
If you look at standard programming languages like C, C++, Java, and so on, they all have standard libraries that enable you to access the underlying hardware.
And also provide a structured way of organization the application into multiple files and then combining them together when you create an application.
Now, unlike traditional programming languages, JavaScript never had a way of distributing the code into multiple files and then combining them together.
So this is where the CommonJS API came in to fill in this gap that fills in the needs for some common application.
CommonJS format defines a module format that can be used for breaking up your JavaScript application into multiple files.
And Node adopts that CommonJS format for organizing our JavaScript application into multiple files.
Within JavaScript, with the CommonJS format, each file becomes its own Node module.


So the file or the JavaScript file defines the boundary for a Node module.
So within that file, the CommonJS specification provides a variable called the module variable which is a JavaScript object.
This gives you access to the current module definition within a file.
On this module object, you have the module.exports property which determines the export from the current module.
So when you assign something to the module.exports property, then that becomes the exported value from the current module.
when this module is imported into another file of our Node application, then whatever is exported from this module becomes available in the second application.
The require function is used to import a Node module that is defined in other file into the current file so that it can be used within our node application.

Node modules can be of three categories.

We have file-based Node modules where we define the Node module within a file, within our application and we make use of it within our application.
Then, we have core modules that are already part of Node.The Node designers kept these core modules intentionally small so that Node can be kept small.The core modules include path, file system, os, util and a few others.
Then we have external Node modules.These are third-party Node modules that are developed by Node developers, and then made available through the Node ecosystem.So these external Node modules can be install within our system using NPM.

If the Node doesn't find the external module within the node_modules folder in the current folder, it will go up to the next higher level folder looking for that Node module.
If it is unable to find the Node module up the hierarchy, then it'll obviously raise an error saying that the Node module is missing.

exports itself is also a shortened version of module.exports .

What do we mean by first-class functions?
Is that a function can be treated just like any other variable. And hence, functions can be passed around as parameters inside function calls to other functions. And that essentially allows us to send in functions as callback functions that can be called from another Node module in order to get some work accomplished. 

What we mean by Closures? 
Especially, if you are familiar with functional programming languages, you understand how closure works. A function defined inside another function automatically gets access to the variables that are declared in the outer function. So even if the outer function is completed execution, when the inner function executes later the inner function will still have access to the values of the variables within that outer function

Node.js is organized into a single threaded event loop.
This single threaded event loop basically, picks up requests as they come in and execute it one after another. 
Whenever it needs to spawn off an I/O request, the I/O request will be spawned off, and any work that needs to be done after the I/O request is completed, will be enclosed inside a Callback.
So when the I/O request completes, then it'll put the Callback into the request queue, and the Callback will be handled thereafter, by the event loop.
So the event loop is a continuously running loop which basically picks up requests from the request queue, and then services them one at a time.

Now, the way the Node.js event loop handles all this, is that the event loop is arranged in a sequence of phases. 
So as you see in the diagram shown here, the phases include timer handling, I/O callback handling, then you have idle, prepare, then the poll where the incoming requests for connections or data are handled, and then the check phase, and then finally, the close callbacks phase. 
In the timer phase, the event loop handles anything that is triggered by the setTimeout() function in JavaScript. The I/O callbacks are executed, almost all the callbacks that come back to be executed after an I/O request will be handled by the I/O callbacks queue.
So each of these phases maintains its own separate queue, and the Node.js event loop picks up requests from each of these queues, and handles them. 
The, idle, prepare, is meant for internal use by Node.js
The poll is where it retrieves new I/O events to be handled and perhaps, the requests coming in from outside.
The close callback phase handles any socket closures that need to be handled, and so on.
https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/

