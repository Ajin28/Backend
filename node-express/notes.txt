One of the most popular third party Node modules or frameworks for building HTTP servers is Express
Express is a fast, unopinionated, minimalist framework that runs on top of Node.js and supports Web development.
Now Express allows you to develop a Web application, server-side application that will serve up content for consumption by our front-end
Express also provides a way of extending and adding functionality to Express through third-party middleware.
This extends the functionality of Express and adds in more features as required. 

Let's briefly talk about the Express middleware. So what exactly is the purpose of middleware? 
The middleware that Express supports provide a lot of plug-in functionality that would be used to enhance your Express application
plug-in functionality like for example we will look at a middleware called Morgan which allows you to print out log information to the screen about the requests that come into your server
Similarly, we'll look at another middleware called BodyParser, which allows you to parse the body of the incoming HTTP request message and extract information from it for use within your Express application

Similarly, we can serve up static Web resources from our server using the Express static  
this will serve up information from a folder within our Express project
in declaring the project you can say I'm double underscore filename and double underscore directory name or dirname which gives you the full path for the file or the directory for the current module

Semantic versioning
So when you specify the version of the package that you use, you always specify the version by specifying the Major Version.Minor Version.the patch.
So when you install a package, it is always identified by these three numbers, major version which might introduce breaking changes so which means that if you are installing a newer version of package it may not be completely backward compatible with previous versions. It may introduce breaking changes whereby you may need to go back and fix the code that you might have written in the earlier version of your project.
The minor version introduces some minor changes to your package and may not be breaking changes.
A patch would be a bug fix that is often issued then a small bug is discovered. So patches usually do not lead to any breaking changes and so you can easily use a higher version or a higher patch version of a particular package that you're using within your Node application

Exact: npm i  express@4.0.0
Patch acceptable: npm i express@"~4.0.0"
Minor version acceptable: npm i  express@"^4.0.0"

package-lock.json is installed by the newer versions of npm
The package-lock.json file is automatically generated by npm which stores information about the exact tree that was generated when you install other Node modules 
and this is very useful when you need to do installation of the Node modules at another location
So for example if you download a Git repository and try to recreate this project on another computer, you would simply type npm install on the prompt and that'll prompt your Node application to automatically install everything that is specified in the dependencies here for you
